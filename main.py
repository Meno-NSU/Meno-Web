import random

import requests
import uvicorn
from fastapi import FastAPI, Request, Form
from fastapi.responses import HTMLResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates

RAG_BACKEND_URL = "http://127.0.0.1:8888"  # —Ç–≤–æ–π –∞–¥—Ä–µ—Å RAG
SESSION_COOKIE = "chat_id"

app = FastAPI()
app.mount("/static", StaticFiles(directory="static"), name="static")
templates = Jinja2Templates(directory="templates")

# –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ chat_id (–ù–ï –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞!)
dialogue_cache = {}  # chat_id -> list of messages


def get_or_create_chat_id(request: Request) -> int:
    chat_id = request.cookies.get(SESSION_COOKIE)
    if not chat_id:
        chat_id = random.randint(10 ** 9, 10 ** 10 - 1)  # –ü—Ä–∏–º–µ—Ä: 10-–∑–Ω–∞—á–Ω–æ–µ —á–∏—Å–ª–æ
        print(f"üîë –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π chat_id: {chat_id}")
    else:
        chat_id = int(chat_id)  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –∏–∑ –∫—É–∫–∏ –≤ —á–∏—Å–ª–æ
    return chat_id


@app.get("/", response_class=HTMLResponse)
async def chat_page(request: Request):
    chat_id = get_or_create_chat_id(request)
    history = dialogue_cache.get(chat_id, [])
    response = templates.TemplateResponse("chat.html", {
        "request": request,
        "messages": history
    })
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cookie —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if SESSION_COOKIE not in request.cookies:
        response.set_cookie(key=SESSION_COOKIE, value=str(chat_id), max_age=30 * 24 * 60 * 60)
    return response


@app.post("/send", response_class=HTMLResponse)
async def send_message(request: Request, message: str = Form(...)):
    chat_id = get_or_create_chat_id(request)
    message = message.strip()

    # –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ RAG-–±—ç–∫–µ–Ω–¥
    payload = {"chat_id": chat_id, "message": message}
    try:
        resp = requests.post(f"{RAG_BACKEND_URL}/chat", json=payload, timeout=60)
        resp.raise_for_status()
        response_data = resp.json()
        assistant_answer = response_data.get("response", "[–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞]")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ —Å–∏—Å—Ç–µ–º–µ: {e}")
        assistant_answer = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"

    # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∫—ç—à (–∏–ª–∏ –Ω–µ –¥–µ–ª–∞—Ç—å —ç—Ç–æ–≥–æ, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –±—ã—Ç—å stateless)
    history = dialogue_cache.setdefault(chat_id, [])
    history.append({"role": "user", "text": message})
    history.append({"role": "assistant", "text": assistant_answer})

    response = templates.TemplateResponse("components/messages.html", {
        "request": request,
        "messages": history
    })
    if SESSION_COOKIE not in request.cookies:
        response.set_cookie(key=SESSION_COOKIE, value=str(chat_id), max_age=30 * 24 * 60 * 60)
    return response


@app.post("/clear", response_class=HTMLResponse)
async def clear_history(request: Request):
    chat_id = get_or_create_chat_id(request)

    # –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ RAG-–±—ç–∫–µ–Ω–¥
    payload = {"chat_id": chat_id}
    try:
        resp = requests.post(f"{RAG_BACKEND_URL}/clear_history", json=payload, timeout=30)
        resp.raise_for_status()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")
    dialogue_cache[chat_id] = []

    response = templates.TemplateResponse("components/messages.html", {
        "request": request,
        "messages": []
    })
    if SESSION_COOKIE not in request.cookies:
        response.set_cookie(key=SESSION_COOKIE, value=str(chat_id), max_age=30 * 24 * 60 * 60)
    return response


if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ FastAPI —Å–µ—Ä–≤–µ—Ä–∞...")
    uvicorn.run("main:app", reload=True)
